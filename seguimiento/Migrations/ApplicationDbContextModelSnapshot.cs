// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using seguimiento.Data;

namespace seguimiento.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.General",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Responsable",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Ejecucion.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Planeacion.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Indicador.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Periodo.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Categoria.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Responsable.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Nivel.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Campo.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Evaluacion.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Rol.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Usuario.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Logs",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Nota.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("seguimiento.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "97f6ff5b-6816-44fc-8e6f-bbdedd1223f9",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("seguimiento.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IDDependencia")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Apellido = "",
                            ConcurrencyStamp = "05622443-5cfd-4389-8879-4523ac4c5aee",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            IDDependencia = 1,
                            LockoutEnabled = false,
                            Nombre = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECPDxHYYnrFlyL6ghv6NFqs7g9ZlRCuHRIgzChzRa5GDZpnwsj563VfwncgzZt+OTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NNK44MKHKTBOV6DHXJ4BT2Q3SYO3WQC2",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("seguimiento.Models.Campo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NivelPadreid")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TipoIndicadorPadreId")
                        .HasColumnType("int");

                    b.Property<bool>("TodaCategoria")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TodoIndicador")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("NivelPadreid");

                    b.HasIndex("TipoIndicadorPadreId");

                    b.ToTable("Campo");
                });

            modelBuilder.Entity("seguimiento.Models.Categoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdResponsable")
                        .HasColumnType("int");

                    b.Property<decimal>("Ponderador")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("idCategoria")
                        .HasColumnType("int");

                    b.Property<int>("idNivel")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nota")
                        .HasColumnType("longtext");

                    b.Property<string>("numero")
                        .HasColumnType("longtext");

                    b.Property<string>("objetivo")
                        .HasColumnType("longtext");

                    b.Property<string>("texto")
                        .HasColumnType("longtext");

                    b.Property<bool>("unificacion")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex("IdResponsable");

                    b.HasIndex("idCategoria");

                    b.HasIndex("idNivel");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            id = 1,
                            IdResponsable = 1,
                            Ponderador = 1m,
                            idNivel = 1,
                            nombre = "Principal",
                            numero = "0.",
                            unificacion = true
                        });
                });

            modelBuilder.Entity("seguimiento.Models.Configuracion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CalculoNivel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EstiloReporte")
                        .HasColumnType("longtext");

                    b.Property<string>("ImgBackgroud")
                        .HasColumnType("longtext");

                    b.Property<string>("ImgHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<string>("NombrePlan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PonderacionTipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("anoFinal")
                        .HasColumnType("int");

                    b.Property<int>("anoInicial")
                        .HasColumnType("int");

                    b.Property<string>("colorPrincipal")
                        .HasColumnType("longtext");

                    b.Property<string>("colorTextoHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("colorTextoPrincipal")
                        .HasColumnType("longtext");

                    b.Property<string>("contacto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("libre")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("nombrePeriodoAnual")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("periodosAnuales")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Configuracion");

                    b.HasData(
                        new
                        {
                            id = 1,
                            CalculoNivel = "2",
                            Entidad = "Entidad",
                            EstiloReporte = "",
                            Logo = "/images/SIE.png",
                            NombrePlan = "Plan",
                            PonderacionTipo = "PonderacionAbsoluta",
                            activo = true,
                            anoFinal = 2021,
                            anoInicial = 2020,
                            colorPrincipal = "#52a3a1",
                            colorTextoHeader = "#ffffff",
                            colorTextoPrincipal = "#00000",
                            contacto = "rinconsebastian@gmail.com",
                            libre = true,
                            nombrePeriodoAnual = "Trimestre",
                            periodosAnuales = 4
                        });
                });

            modelBuilder.Entity("seguimiento.Models.Ejecucion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nota")
                        .HasColumnType("longtext");

                    b.Property<string>("adjunto")
                        .HasColumnType("longtext");

                    b.Property<bool>("cargado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ejecutado")
                        .HasColumnType("longtext");

                    b.Property<int>("idindicador")
                        .HasColumnType("int");

                    b.Property<int>("idperiodo")
                        .HasColumnType("int");

                    b.Property<string>("planeado")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("idindicador");

                    b.HasIndex("idperiodo");

                    b.ToTable("Ejecucion");
                });

            modelBuilder.Entity("seguimiento.Models.EjecucionCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Calculado")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<decimal>("Maximo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Mostrar")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("idperiodo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("idperiodo");

                    b.ToTable("EjecucionCategoria");
                });

            modelBuilder.Entity("seguimiento.Models.Evaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Categoriaid")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Contexto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Indicadorid")
                        .HasColumnType("int");

                    b.Property<decimal>("Maximo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Minimo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Categoriaid");

                    b.HasIndex("Indicadorid");

                    b.ToTable("Evaluacion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#ff0000",
                            Contexto = "Global",
                            Maximo = 60m,
                            Minimo = 0m,
                            Nombre = "Mínimo"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#ffff00",
                            Contexto = "Global",
                            Maximo = 80m,
                            Minimo = 60m,
                            Nombre = "Aceptable"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#00ff00",
                            Contexto = "Global",
                            Maximo = 100m,
                            Minimo = 80m,
                            Nombre = "Satisfactorio"
                        });
                });

            modelBuilder.Entity("seguimiento.Models.Indicador", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nota")
                        .HasColumnType("longtext");

                    b.Property<string>("adjunto")
                        .HasColumnType("longtext");

                    b.Property<string>("codigo")
                        .HasColumnType("longtext");

                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.Property<decimal>("ponderador")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.Property<string>("unidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("idCategoria");

                    b.HasIndex("tipo");

                    b.ToTable("Indicador");
                });

            modelBuilder.Entity("seguimiento.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContenidoNew")
                        .HasColumnType("longtext");

                    b.Property<string>("ContenidoOld")
                        .HasColumnType("longtext");

                    b.Property<string>("Tarea")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("seguimiento.Models.Nivel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Nivel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            color = "000000",
                            nombre = "Plan",
                            numero = 1
                        },
                        new
                        {
                            id = 2,
                            color = "000000",
                            nombre = "Categoria",
                            numero = 2
                        });
                });

            modelBuilder.Entity("seguimiento.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adjunto")
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("UserId");

                    b.ToTable("Nota");
                });

            modelBuilder.Entity("seguimiento.Models.Periodo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EditarEjecucion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EditarProgramacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ocultar")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("calculo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("cargado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("desplegado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("orden")
                        .HasColumnType("int");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Periodo");
                });

            modelBuilder.Entity("seguimiento.Models.Policy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("claim")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Policy");

                    b.HasData(
                        new
                        {
                            id = 1,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.General",
                            nombre = "Ver Configuración general"
                        },
                        new
                        {
                            id = 2,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Responsable",
                            nombre = "Configuración dependencia"
                        },
                        new
                        {
                            id = 3,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Ejecucion.Editar",
                            nombre = "Editar ejecución"
                        },
                        new
                        {
                            id = 4,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Planeacion.Editar",
                            nombre = "Editar planeación"
                        },
                        new
                        {
                            id = 5,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Indicador.Editar",
                            nombre = "Editar indicadores"
                        },
                        new
                        {
                            id = 6,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Periodo.Editar",
                            nombre = "Editar periodo"
                        },
                        new
                        {
                            id = 7,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Categoria.Editar",
                            nombre = "Editar categorias"
                        },
                        new
                        {
                            id = 8,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Responsable.Editar",
                            nombre = "Editar dependencias"
                        },
                        new
                        {
                            id = 9,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Nivel.Editar",
                            nombre = "Editar niveles"
                        },
                        new
                        {
                            id = 10,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Campo.Editar",
                            nombre = "Editar campos"
                        },
                        new
                        {
                            id = 11,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Evaluacion.Editar",
                            nombre = "Editar evaluaciones"
                        },
                        new
                        {
                            id = 12,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Rol.Editar",
                            nombre = "Editar roles"
                        },
                        new
                        {
                            id = 13,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Usuario.Editar",
                            nombre = "Editar usuarios"
                        },
                        new
                        {
                            id = 14,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Logs",
                            nombre = "Ver registro actividad"
                        },
                        new
                        {
                            id = 15,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Nota.Editar",
                            nombre = "Editar notas"
                        });
                });

            modelBuilder.Entity("seguimiento.Models.Responsable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Editar")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IdJefe")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdJefe");

                    b.ToTable("Responsable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Editar = true,
                            Nombre = "Entidad"
                        });
                });

            modelBuilder.Entity("seguimiento.Models.TipoIndicador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Imagendescripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("file")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoIndicador");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "AIncnoacumTmtto",
                            Enable = true,
                            Tipo = "AIncnoacumTmtto",
                            file = "AIncnoacumTmtto"
                        });
                });

            modelBuilder.Entity("seguimiento.Models.ValorCampo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoriaPadreid")
                        .HasColumnType("int");

                    b.Property<int>("IdCampo")
                        .HasColumnType("int");

                    b.Property<int?>("IndicadorPadreid")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPadreid");

                    b.HasIndex("IdCampo");

                    b.HasIndex("IndicadorPadreid");

                    b.ToTable("ValorCampo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("seguimiento.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("seguimiento.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("seguimiento.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("seguimiento.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seguimiento.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("seguimiento.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("seguimiento.Models.Campo", b =>
                {
                    b.HasOne("seguimiento.Models.Nivel", "NivelPadre")
                        .WithMany()
                        .HasForeignKey("NivelPadreid");

                    b.HasOne("seguimiento.Models.TipoIndicador", "TipoIndicadorPadre")
                        .WithMany()
                        .HasForeignKey("TipoIndicadorPadreId");

                    b.Navigation("NivelPadre");

                    b.Navigation("TipoIndicadorPadre");
                });

            modelBuilder.Entity("seguimiento.Models.Categoria", b =>
                {
                    b.HasOne("seguimiento.Models.Responsable", "Responsable")
                        .WithMany()
                        .HasForeignKey("IdResponsable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seguimiento.Models.Categoria", "CategoriaPadre")
                        .WithMany()
                        .HasForeignKey("idCategoria");

                    b.HasOne("seguimiento.Models.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("idNivel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaPadre");

                    b.Navigation("Nivel");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("seguimiento.Models.Ejecucion", b =>
                {
                    b.HasOne("seguimiento.Models.Indicador", "Indicador")
                        .WithMany()
                        .HasForeignKey("idindicador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seguimiento.Models.Periodo", "Periodo")
                        .WithMany()
                        .HasForeignKey("idperiodo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicador");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("seguimiento.Models.EjecucionCategoria", b =>
                {
                    b.HasOne("seguimiento.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seguimiento.Models.Periodo", "Periodo")
                        .WithMany()
                        .HasForeignKey("idperiodo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("seguimiento.Models.Evaluacion", b =>
                {
                    b.HasOne("seguimiento.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("Categoriaid");

                    b.HasOne("seguimiento.Models.Indicador", "Indicador")
                        .WithMany()
                        .HasForeignKey("Indicadorid");

                    b.Navigation("Categoria");

                    b.Navigation("Indicador");
                });

            modelBuilder.Entity("seguimiento.Models.Indicador", b =>
                {
                    b.HasOne("seguimiento.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("idCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seguimiento.Models.TipoIndicador", "TipoIndicador")
                        .WithMany()
                        .HasForeignKey("tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("TipoIndicador");
                });

            modelBuilder.Entity("seguimiento.Models.Nota", b =>
                {
                    b.HasOne("seguimiento.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seguimiento.Models.ApplicationUser", "User")
                        .WithMany("Notas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("User");
                });

            modelBuilder.Entity("seguimiento.Models.Responsable", b =>
                {
                    b.HasOne("seguimiento.Models.Responsable", "ResponsableJefe")
                        .WithMany("Hijos")
                        .HasForeignKey("IdJefe");

                    b.Navigation("ResponsableJefe");
                });

            modelBuilder.Entity("seguimiento.Models.ValorCampo", b =>
                {
                    b.HasOne("seguimiento.Models.Categoria", "CategoriaPadre")
                        .WithMany()
                        .HasForeignKey("CategoriaPadreid");

                    b.HasOne("seguimiento.Models.Campo", "CampoPadre")
                        .WithMany()
                        .HasForeignKey("IdCampo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seguimiento.Models.Indicador", "IndicadorPadre")
                        .WithMany()
                        .HasForeignKey("IndicadorPadreid");

                    b.Navigation("CampoPadre");

                    b.Navigation("CategoriaPadre");

                    b.Navigation("IndicadorPadre");
                });

            modelBuilder.Entity("seguimiento.Models.ApplicationUser", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("seguimiento.Models.Responsable", b =>
                {
                    b.Navigation("Hijos");
                });
#pragma warning restore 612, 618
        }
    }
}
