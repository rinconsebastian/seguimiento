@model seguimiento.Models.Indicador


@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<h2>Editar</h2>

@using (Html.BeginForm("Edit", "Indicadors", FormMethod.Post, new { id = "formIndicador", @class = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Indicador</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.idCategoria, "idCategoria", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("idCategoria", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idCategoria, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ponderador, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ponderador, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ponderador, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.tipo, "tipo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("tipo", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.tipo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.unidad, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.unidad, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.unidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.codigo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.codigo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.codigo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nota, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nota, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nota, "", new { @class = "text-danger" })
            </div>
        </div>




        @foreach (var campo in ViewBag.campos)
        {
            if (campo.Campo.Activado == true)
            {

                <div class="form-group">
                    <label class="control-label col-md-2" for="adjunto">@Html.Raw(campo.Campo.Nombre.Remove(campo.Campo.Nombre.Length - 3))</label>
                    <div class="col-md-10">
                        @if (campo.Valor != null)
                        {
                            @Html.TextBox((string)campo.Campo.Nombre, (string)campo.Valor.Texto, (string)campo.Valor.Texto, new { @class = "form-control" })
                        }
                        else
                        {
                            @Html.TextBox((string)campo.Campo.Nombre, "", "", new { @class = "form-control" })

                        }
                    </div>
                </div>
            }
        }




        <div class="form-group">
            @Html.LabelFor(model => model.adjunto, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <p class="align-right margin-bottom-0 maxWidthConfig">
                    @Html.EditorFor(model => model.adjunto, new { htmlAttributes = new { @class = "form-control hide", @readonly = "true" } })
                    <a href="../../Upload/UploadedFiles/@Model.adjunto" target="_blank" id="urlAdjuntoEjecucion">@Model.adjunto</a>
                    @Html.ValidationMessageFor(model => model.adjunto, "", new { @class = "text-danger uploading" })
                </p>
            </div>
        </div>

    </div>
}

@using (Html.BeginForm("UploadFile", "Upload", FormMethod.Post, new { enctype = "multipart/form-data", id = "uploadFileFormEjecucion", @class = "form" }))
{

    <div class="row" id="EjecucionContenidoConfig">
        <div class="col-md-2"></div>
        <div class="col-md-10">
            @Html.TextBox("file", "", new { type = "file", id = "fileuploadtextEjecucion" })
        </div>
        @ViewBag.Message

    </div>
}

<div class="form-group">
    <div class="col-md-offset-2 col-md-10">
        <p class=" float-right">
            @Html.ActionLink("Atras", "Index", "", htmlAttributes: new { @class = "btn btn-default" })
            <input type="button" value="Guardar" class="btn btn-default" id="submitEditIndicador" />

        </p>
    </div>

</div>

@section scripts
{
    <script async src="~/js/ConfiguracionScript.js"></script>
    <script type="text/javascript">

        $('#EjecucionContenido').on('submit', '#uploadFileFormEjecucion', function (d) {

            d.preventDefault();
        });





    </script>


}
